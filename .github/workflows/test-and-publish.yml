name: Publish
on:
  push:
    branches:
      - main

jobs:
  run-tests:
    name: "Run tests"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install mise
        uses: jdx/mise-action@v2
      - name: Get pnpm store location
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install pnpm dependencies
        run: pnpm install --frozen-lockfile
      - name: Run tests via mise
        run: mise run test
  publish-jsr:
    name: "Publish to jsr.io"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: run-tests
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install mise
        uses: jdx/mise-action@v2
      - name: Get pnpm store location
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install pnpm dependencies
        run: pnpm install --frozen-lockfile
      - name: Publish package
        run: pnpm dlx jsr publish
  publish-github:
    name: "Publish to GitHub Releases"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: publish-jsr
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install mise
        uses: jdx/mise-action@v2
      - name: Get version from jsr.json
        id: get_version
        run: |
          VERSION="v$(yq eval -er '.version' jsr.json)"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Detected version: $VERSION"
      - name: Check for existing release
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG="${{ steps.get_version.outputs.version }}"
          if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "release_exists=true" >> "$GITHUB_OUTPUT"
            echo "Release $RELEASE_TAG already exists. Skipping release creation."
          else
            echo "release_exists=false" >> "$GITHUB_OUTPUT"
            echo "Release $RELEASE_TAG does not exist. Proceeding with release creation."
          fi
      - name: Create GitHub release
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          body: |
            This is an automated release generated by the GitHub Actions, corresponding to the version specified in `jsr.json`.

            > **Version:** `${{ steps.get_version.outputs.version }}`    
            > **Triggered by:** `${{ github.event_name }}`
            > **Workflow Run ID:** [`${{ github.run_id }}`](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            > **Commit SHA:** [`${{ github.sha }}`](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
