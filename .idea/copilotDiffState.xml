<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/spaceAdjustUtils.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/spaceAdjustUtils.ts" />
              <option name="originalContent" value="import type { SpaceAdjustOptions } from &quot;./types.ts&quot;;&#10;import {&#10;  isInsertAction,&#10;  isInsertEndAction,&#10;  isInsertStartAction,&#10;  isReplaceAction,&#10;  isReplaceAllAction,&#10;  isReplaceFirstAction,&#10;  isReplaceLastAction,&#10;  stripAction,&#10;} from &quot;./typeUtils.ts&quot;;&#10;&#10;export class SpaceAdjustProcessor {&#10;  readonly zero: {&#10;    readonly action: &quot;insert&quot;;&#10;    readonly char: string;&#10;  };&#10;  readonly single: {&#10;    readonly action: &quot;replace&quot; | &quot;insertStart&quot; | &quot;insertEnd&quot;;&#10;    readonly char: string;&#10;  };&#10;  readonly multiple: {&#10;    readonly action:&#10;      | &quot;replaceFirst&quot;&#10;      | &quot;replaceLast&quot;&#10;      | &quot;replaceAll&quot;&#10;      | &quot;insertStart&quot;&#10;      | &quot;insertEnd&quot;;&#10;    readonly char: string;&#10;  };&#10;&#10;  constructor(&#10;    options: SpaceAdjustOptions,&#10;    defaultValues: Required&lt;SpaceAdjustOptions&gt;,&#10;  ) {&#10;    let {&#10;      zeroSpace = defaultValues.zeroSpace,&#10;      singleSpace = defaultValues.singleSpace,&#10;      multipleSpace = defaultValues.multipleSpace,&#10;    } = options;&#10;&#10;    if (zeroSpace === &quot;noop&quot;) zeroSpace = &quot;insert:&quot;;&#10;    if (singleSpace === &quot;noop&quot;) singleSpace = &quot;insertEnd:&quot;;&#10;    if (singleSpace === &quot;delete&quot;) singleSpace = &quot;replace:&quot;;&#10;    if (multipleSpace === &quot;noop&quot;) multipleSpace = &quot;insertEnd:&quot;;&#10;    if (multipleSpace === &quot;deleteOne&quot;) multipleSpace = &quot;replaceLast:&quot;;&#10;    if (multipleSpace === &quot;deleteAll&quot;) multipleSpace = &quot;replaceAll:&quot;;&#10;&#10;    const zeroChar = stripAction(zeroSpace);&#10;    if (isInsertAction(zeroSpace)) {&#10;      this.zero = { action: &quot;insert&quot;, char: zeroChar };&#10;    } else {&#10;      throw new Error(`Unknown zeroSpace option: ${options.zeroSpace}`);&#10;    }&#10;&#10;    const singleChar = stripAction(singleSpace);&#10;    if (isReplaceAction(singleSpace)) {&#10;      this.single = { action: &quot;replace&quot;, char: singleChar };&#10;    } else if (isInsertStartAction(singleSpace)) {&#10;      this.single = { action: &quot;insertStart&quot;, char: singleChar };&#10;    } else if (isInsertEndAction(singleSpace)) {&#10;      this.single = { action: &quot;insertEnd&quot;, char: singleChar };&#10;    } else {&#10;      throw new Error(`Unknown singleSpace option: ${options.singleSpace}`);&#10;    }&#10;&#10;    const multipleChar = stripAction(multipleSpace);&#10;    if (isReplaceFirstAction(multipleSpace)) {&#10;      this.multiple = { action: &quot;replaceFirst&quot;, char: multipleChar };&#10;    } else if (isReplaceLastAction(multipleSpace)) {&#10;      this.multiple = { action: &quot;replaceLast&quot;, char: multipleChar };&#10;    } else if (isReplaceAllAction(multipleSpace)) {&#10;      this.multiple = { action: &quot;replaceAll&quot;, char: multipleChar };&#10;    } else if (isInsertStartAction(singleSpace)) {&#10;      this.multiple = { action: &quot;insertStart&quot;, char: multipleChar };&#10;    } else if (isInsertEndAction(singleSpace)) {&#10;      this.multiple = { action: &quot;insertEnd&quot;, char: multipleChar };&#10;    } else {&#10;      throw new Error(`Unknown multipleSpace option: ${options.multipleSpace}`);&#10;    }&#10;  }&#10;&#10;  replaceString(s: string): string {}&#10;}&#10;" />
              <option name="updatedContent" value="import type { SpaceAdjustOptions } from &quot;./types.ts&quot;;&#10;import {&#10;  isInsertAction,&#10;  isInsertEndAction,&#10;  isInsertStartAction,&#10;  isReplaceAction,&#10;  isReplaceAllAction,&#10;  isReplaceFirstAction,&#10;  isReplaceLastAction,&#10;  stripAction,&#10;} from &quot;./typeUtils.ts&quot;;&#10;&#10;export interface SpaceAction {&#10;  readonly action: &quot;insert&quot;;&#10;  readonly char: string;&#10;}&#10;&#10;export interface SingleSpaceAction {&#10;  readonly action: &quot;replace&quot; | &quot;insertStart&quot; | &quot;insertEnd&quot;;&#10;  readonly char: string;&#10;}&#10;&#10;export interface MultipleSpaceAction {&#10;  readonly action:&#10;    | &quot;replaceFirst&quot;&#10;    | &quot;replaceLast&quot;&#10;    | &quot;replaceAll&quot;&#10;    | &quot;insertStart&quot;&#10;    | &quot;insertEnd&quot;;&#10;  readonly char: string;&#10;}&#10;&#10;export interface SpaceAdjustConfig {&#10;  readonly zero: SpaceAction;&#10;  readonly single: SingleSpaceAction;&#10;  readonly multiple: MultipleSpaceAction;&#10;}&#10;&#10;export function createSpaceAdjustConfig(&#10;  options: SpaceAdjustOptions,&#10;  defaultValues: Required&lt;SpaceAdjustOptions&gt;,&#10;): SpaceAdjustConfig {&#10;  let {&#10;    zeroSpace = defaultValues.zeroSpace,&#10;    singleSpace = defaultValues.singleSpace,&#10;    multipleSpace = defaultValues.multipleSpace,&#10;  } = options;&#10;&#10;  if (zeroSpace === &quot;noop&quot;) zeroSpace = &quot;insert:&quot;;&#10;  if (singleSpace === &quot;noop&quot;) singleSpace = &quot;insertEnd:&quot;;&#10;  if (singleSpace === &quot;delete&quot;) singleSpace = &quot;replace:&quot;;&#10;  if (multipleSpace === &quot;noop&quot;) multipleSpace = &quot;insertEnd:&quot;;&#10;  if (multipleSpace === &quot;deleteOne&quot;) multipleSpace = &quot;replaceLast:&quot;;&#10;  if (multipleSpace === &quot;deleteAll&quot;) multipleSpace = &quot;replaceAll:&quot;;&#10;&#10;  const zeroChar = stripAction(zeroSpace);&#10;  let zero: SpaceAction;&#10;  if (isInsertAction(zeroSpace)) {&#10;    zero = { action: &quot;insert&quot;, char: zeroChar };&#10;  } else {&#10;    throw new Error(`Unknown zeroSpace option: ${options.zeroSpace}`);&#10;  }&#10;&#10;  const singleChar = stripAction(singleSpace);&#10;  let single: SingleSpaceAction;&#10;  if (isReplaceAction(singleSpace)) {&#10;    single = { action: &quot;replace&quot;, char: singleChar };&#10;  } else if (isInsertStartAction(singleSpace)) {&#10;    single = { action: &quot;insertStart&quot;, char: singleChar };&#10;  } else if (isInsertEndAction(singleSpace)) {&#10;    single = { action: &quot;insertEnd&quot;, char: singleChar };&#10;  } else {&#10;    throw new Error(`Unknown singleSpace option: ${options.singleSpace}`);&#10;  }&#10;&#10;  const multipleChar = stripAction(multipleSpace);&#10;  let multiple: MultipleSpaceAction;&#10;  if (isReplaceFirstAction(multipleSpace)) {&#10;    multiple = { action: &quot;replaceFirst&quot;, char: multipleChar };&#10;  } else if (isReplaceLastAction(multipleSpace)) {&#10;    multiple = { action: &quot;replaceLast&quot;, char: multipleChar };&#10;  } else if (isReplaceAllAction(multipleSpace)) {&#10;    multiple = { action: &quot;replaceAll&quot;, char: multipleChar };&#10;  } else if (isInsertStartAction(singleSpace)) {&#10;    multiple = { action: &quot;insertStart&quot;, char: multipleChar };&#10;  } else if (isInsertEndAction(singleSpace)) {&#10;    multiple = { action: &quot;insertEnd&quot;, char: multipleChar };&#10;  } else {&#10;    throw new Error(`Unknown multipleSpace option: ${options.multipleSpace}`);&#10;  }&#10;&#10;  return { zero, single, multiple };&#10;}&#10;&#10;export function replaceString(config: SpaceAdjustConfig, s: string): string {}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>